import cosas.*
import camion.*

describe "cargar cosas" {
  test "carga de bateriaAntiaerea" {
    camion.cargar(bateriaAntiaerea)
    assert.equals(#{bateriaAntiaerea}, camion.cosas())
  }  

  test "wl camion no vuelve a cargar algo que ya tiene" {
    camion.cargar(bateriaAntiaerea)
    
    assert.throwsException({ camion.cargar(bateriaAntiaerea) })
  }
}

describe "descarga de cosas" {
  test "descargar residuosRadiactivos" {
    camion.cargar(residuosRadiactivos)
    camion.descargar(residuosRadiactivos)

    assert.equals(#{}, camion.cosas())
  }

  test "el camion no puede descargar algo que no tiene" {
    assert.throwsException({ camion.descargar(bateriaAntiaerea) })
  }
}
  
describe "es todo peso par" {
  test "camio cargado con peso par" {
    camion.cargar(bumblebee)
    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)

    assert.equals(true, camion.todoPesoPar())
  }

  test "camio cargado con peso impar" {
    arenaAGranel.peso(51)
    camion.cargar(arenaAGranel)

    assert.equals(false, camion.todoPesoPar())
  }
}

describe "peso exacto" {
  method initialize() {
    camion.cargar(bumblebee)
    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)
  }

  test "camion cargado con peso exacto" {
    assert.equals(true, camion.pesaExactamente(50))
    assert.equals(true, camion.pesaExactamente(800))
  }

  test "camion no cargado con ese peso" {
    assert.equals(false, camion.pesaExactamente(500))
  }
}

describe "peso y exceso de peso" {
  test "Peso no excedido de 2400" {
    camion.cargar(bumblebee)
    paqueteDeLadrillos.cantDeLadrillos(300)
    camion.cargar(paqueteDeLadrillos)

    assert.equals(2400, camion.pesoDelCamion())
    assert.equals(false, camion.estaExedidoDePeso())
  }

  test "Peso excedido de 2600" {
    camion.cargar(bumblebee)
    paqueteDeLadrillos.cantDeLadrillos(400)
    camion.cargar(paqueteDeLadrillos)

    assert.equals(2600, camion.pesoDelCamion())
    assert.equals(true, camion.estaExedidoDePeso())
  }
}

describe "el del nivel" {
  method initialize() {
    bumblebee.transformacion("auto")
    camion.cargar(bumblebee)
    bateriaAntiaerea.estaConMisiles(false)
    camion.cargar(bateriaAntiaerea)
    camion.cargar(residuosRadiactivos)
  }
  test "algo de nivel 0" {
    assert.equals(bateriaAntiaerea, camion.encontrarCosaConPeligrosidad(0))
  }

  test "algo de nivel 15" {
    assert.equals(bumblebee, camion.encontrarCosaConPeligrosidad(15))
  }

  test "algo de nivel 200" {
    assert.equals(residuosRadiactivos, camion.encontrarCosaConPeligrosidad(200))
  }

  test "rompe" {
    assert.throwsException({ camion.encontrarCosaConPeligrosidad(30) })
  }

  test "bumblebee en modo robot" {
    bumblebee.transformacion("robot")
    assert.equals(bumblebee, camion.encontrarCosaConPeligrosidad(30))
  }

  test "bateria con misiles" {
    bateriaAntiaerea.estaConMisiles(true)
    assert.equals(bateriaAntiaerea, camion.encontrarCosaConPeligrosidad(100))
  }

}

describe "cosas peligrosas" {
  method initialize() {
    camion.cargar(knightRider)
    bateriaAntiaerea.estaConMisiles(true)
    camion.cargar(bateriaAntiaerea)
  }
  test "las cosas m√°s peligrosas de 15" {
    assert.equals(#{bateriaAntiaerea}, camion.cosasQueSuperePeligrosidad(15))
  }
  test "las cosas mas peligrosas que bumblebee" {
    assert.equals(#{bateriaAntiaerea}, camion.cosasConMasNivelQue(bumblebee))
  }
  test "las cosas mas peligrosas que paquete de ladrillos" {
    assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasConMasNivelQue(paqueteDeLadrillos))
  }
  test "no hay cosas mas peligrosas que el paquete de ladrillos" {
    assert.equals(#{}, camion.cosasQueSuperePeligrosidad(200))
  }

  test "no hay nada mas peligroso que residuos radiactivos" {
    assert.equals(#{}, camion.cosasConMasNivelQue(residuosRadiactivos))
  }

  
}